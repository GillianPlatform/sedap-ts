/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The type of a branch case is arbitrary and implementation-dependent.
 * The UI should essentially treat this as a black box to pass back to the debugger when calling "stepSpecific".
 *
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "BranchCase".
 */
export type BranchCase = unknown;
/**
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "MapNodeNext".
 */
export type MapNodeNext =
  | {
      kind: "single";
      id: string | null;
    }
  | {
      kind: "branch";
      cases: {
        branchLabel: string;
        branchCase: BranchCase;
        id: string | null;
      }[];
    }
  | {
      kind: "final";
    };
/**
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "MapNodeExtra".
 */
export type MapNodeExtra = {
  kind: "badge";
  text: string;
  tag?: string;
};
/**
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "MapNodeOptions".
 */
export type MapNodeOptions =
  | {
      kind: "basic";
      display: string;
      selectable?: boolean;
      extras?: MapNodeExtra[];
    }
  | {
      kind: "root";
      title: string;
      subtitle?: string;
      zoomable?: boolean;
      extras?: MapNodeExtra[];
    }
  | {
      kind: "custom";
      customKind: string;
      customOptions: unknown;
    };
/**
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "MapUpdateEvent".
 */
export type MapUpdateEvent = (BaseProtocol & {
  type: "event";
  /**
   * Type of event.
   */
  event: string;
  /**
   * Event-specific information.
   */
  body?: unknown[] | boolean | number | null | {} | string;
}) & {
  event: "mapUpdate";
  body: MapUpdateEventBody;
};
/**
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "StepSpecificRequest".
 */
export type StepSpecificRequest = (BaseProtocol & {
  type: "request";
  /**
   * The command to execute.
   */
  command: string;
  /**
   * Object containing arguments for the command.
   */
  arguments?: unknown[] | boolean | number | null | {} | string;
}) & {
  command: "stepSpecific";
  arguments: StepSpecificArguments;
};
/**
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "StepSpecificResponse".
 */
export type StepSpecificResponse = (BaseProtocol & {
  type: "response";
  /**
   * Sequence number of the corresponding request.
   */
  request_seq: number;
  /**
   * Outcome of the request.
   * If true, the request was successful and the `body` attribute may contain the result of the request.
   * If the value is false, the attribute `message` contains the error in short form and the `body` may contain additional information (see `ErrorResponse.body.error`).
   */
  success: boolean;
  /**
   * The command requested.
   */
  command: string;
  /**
   * Contains the raw error in short form if `success` is false.
   * This raw error might be interpreted by the client and is not shown in the UI.
   * Some predefined values exist.
   */
  message?: string;
  /**
   * Contains request result if success is true and error details if success is false.
   */
  body?: unknown[] | boolean | number | null | {} | string;
}) & {};
/**
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "JumpRequest".
 */
export type JumpRequest = (BaseProtocol & {
  type: "request";
  /**
   * The command to execute.
   */
  command: string;
  /**
   * Object containing arguments for the command.
   */
  arguments?: unknown[] | boolean | number | null | {} | string;
}) & {
  command: "jump";
  arguments: JumpArguments;
};
/**
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "JumpResponse".
 */
export type JumpResponse = (BaseProtocol & {
  type: "response";
  /**
   * Sequence number of the corresponding request.
   */
  request_seq: number;
  /**
   * Outcome of the request.
   * If true, the request was successful and the `body` attribute may contain the result of the request.
   * If the value is false, the attribute `message` contains the error in short form and the `body` may contain additional information (see `ErrorResponse.body.error`).
   */
  success: boolean;
  /**
   * The command requested.
   */
  command: string;
  /**
   * Contains the raw error in short form if `success` is false.
   * This raw error might be interpreted by the client and is not shown in the UI.
   * Some predefined values exist.
   */
  message?: string;
  /**
   * Contains request result if success is true and error details if success is false.
   */
  body?: unknown[] | boolean | number | null | {} | string;
}) & {};
/**
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "GetFullMapRequest".
 */
export type GetFullMapRequest = (BaseProtocol & {
  type: "request";
  /**
   * The command to execute.
   */
  command: string;
  /**
   * Object containing arguments for the command.
   */
  arguments?: unknown[] | boolean | number | null | {} | string;
}) & {
  command: "jump";
  arguments: GetFullMapArguments;
};
/**
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "GetFullMapResponse".
 */
export type GetFullMapResponse = (BaseProtocol & {
  type: "response";
  /**
   * Sequence number of the corresponding request.
   */
  request_seq: number;
  /**
   * Outcome of the request.
   * If true, the request was successful and the `body` attribute may contain the result of the request.
   * If the value is false, the attribute `message` contains the error in short form and the `body` may contain additional information (see `ErrorResponse.body.error`).
   */
  success: boolean;
  /**
   * The command requested.
   */
  command: string;
  /**
   * Contains the raw error in short form if `success` is false.
   * This raw error might be interpreted by the client and is not shown in the UI.
   * Some predefined values exist.
   */
  message?: string;
  /**
   * Contains request result if success is true and error details if success is false.
   */
  body?: unknown[] | boolean | number | null | {} | string;
}) & {
  body?: MapUpdateEventBody;
};

/**
 * An extension of the Debug Adapter Protocol for debugging symbolic execution.
 */
export interface SEDAP {}
/**
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "MapNode".
 */
export interface MapNode {
  id: string;
  aliases?: string[];
  submaps?: string[];
  next: MapNodeNext;
  options: MapNodeOptions;
}
/**
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "MapUpdateEventBody".
 */
export interface MapUpdateEventBody {
  /**
   * An object of map nodes to update, where a key is the node's ID, or null to specify node deleting the node at that ID.
   */
  nodes?: {
    [k: string]: MapNode | null;
  };
  roots?: {
    [k: string]: string;
  };
  currentSteps?: string[];
  /**
   * If true, the map should be reset to its initial state; this event contains the full map and previous information can be discarded.
   */
  reset?: boolean;
  ext?: {
    [k: string]: unknown;
  };
}
/**
 * Base class of requests, responses, and events.
 */
export interface BaseProtocol {
  /**
   * Sequence number of the message (also known as message ID). The `seq` for the first message sent by a client or debug adapter is 1, and for each subsequent message is 1 greater than the previous message sent by that actor. `seq` can be used to order requests, responses, and events, and to associate requests with their corresponding responses. For protocol messages of type `request` the sequence number can be used to cancel the request.
   */
  seq: number;
  /**
   * Message type.
   */
  type: string;
}
/**
 * Arguments for 'stepSpecific' request.
 *
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "StepSpecificArguments".
 */
export interface StepSpecificArguments {
  /**
   * The id of the execution node to step from.
   */
  stepId: string;
  /**
   * The type of a branch case is arbitrary and implementation-dependent.
   * The UI should essentially treat this as a black box to pass back to the debugger when calling "stepSpecific".
   */
  branchCase?: unknown;
}
/**
 * Arguments for 'jump'' request.
 *
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "JumpArguments".
 */
export interface JumpArguments {
  /**
   * The id of the execution node to jump to.
   */
  stepId: string;
}
/**
 * The 'getFullMap' request takes no arguments.
 *
 * This interface was referenced by `SEDAP`'s JSON-Schema
 * via the `definition` "GetFullMapArguments".
 */
export interface GetFullMapArguments {}
